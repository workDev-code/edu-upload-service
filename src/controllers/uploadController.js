import logger from "../config/loggerConfig.js"
import fs from 'fs/promises';
import path from 'path';
import 'dotenv/config'; 
import {
  isFileExists,
  deleteFileSafely
} from "../utils/fileUtils.js"



const UPLOAD_DIR = process.env.UPLOAD_DIR;

export const handleUpload = async (req, res) => {
  // X·ª≠ l√Ω upload
   try {
    if (!req.file) {
      return res.status(400).json({ error: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n.' });
    }
    console.log('‚úÖ File nh·∫≠n ƒë∆∞·ª£c:', req.file);

    res.status(200).json({
      message: 'T·∫£i l√™n th√†nh c√¥ng!',
      file: req.file
    });
  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh upload:', error);
    res.status(500).json({
      error: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh upload. Vui l√≤ng th·ª≠ l·∫°i sau.'
    });
  }
};

export const handleUploadMultileFiles = async (req, res) => {
  try{
    // check coi c√≥ files n√†o ƒë∆∞·ª£c g·ª≠i l√™n kh√¥ng
    if(!req.files || req.files.length === 0){
        logger.warn('Upload th·∫•t b·∫°i: kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n'); // ‚ö†Ô∏è ghi log warning
        return res.status(400).json({ error: 'Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n.' });
    }

    const uploadedFiles = req.files.map(file => ({
      originalName: file.originalname, 	// T√™n th·∫≠t file ng∆∞·ªùi d√πng g·ª≠i l√™n
      filename: file.filename, // T√™n file do server ƒë·∫∑t (tr√°nh tr√πng, an to√†n)
      mimetype: file.mimetype,
      size: file.size,
      url: `${process.env.HOST_URL}/uploads/${file.filename}` // üîó Tr·∫£ v·ªÅ link truy c·∫≠p c√¥ng khai
    }));

    res.json({
      message: 'Upload nhi·ªÅu file th√†nh c√¥ng!',
      files: uploadedFiles
    });

  }catch(error){
    console.error('‚ùå L·ªói trong qu√° tr√¨nh upload:', error);
    res.status(500).json({
      error: 'ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh upload. Vui l√≤ng th·ª≠ l·∫°i sau.'
    });
  }
}


export const listUploadedFiles = async (_, res) => {
  try{
    const uploadDir = path.join(process.cwd(), 'src', 'uploads'); // ƒëi·ªÅu ch·ªânh n·∫øu uploads ·ªü ch·ªó kh√°c

    // Ki·ªÉm tra xem th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
    try {
      await fs.access(uploadDir); // n√©m l·ªói n·∫øu kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng truy c·∫≠p ƒë∆∞·ª£c
    } catch (accessErr) {
      return res.status(404).json({ error: 'Th∆∞ m·ª•c uploads kh√¥ng t·ªìn t·∫°i.' });
    }

    const files = await fs.readdir(uploadDir);
    res.status(200).json({
      total_files: files.length,
      files: files,
    });
  }catch(error){
    console.error('‚ùå L·ªói trong qu√° tr√¨nh upload:', error);
    res.status(500).json({ error: 'Kh√¥ng th·ªÉ ƒë·ªçc danh s√°ch file upload.' });
  }
}

export const deleteUpload = async (req, res) => {
  try{
    const { filename } = req.params;
    console.log(filename);
    // 1. Validate t√™n file: kh√¥ng ch·ª©a "..", "/", "\", v.v.
    if (!filename || filename.includes('..') || filename.includes('/')) {
      return res.status(400).json({
        success: false,
        error: 'Invalid filename.',
      });
    }

    // 2. Join ƒë∆∞·ªùng d·∫´n an to√†n: path.join(uploadsDir, filename)

    // L·∫•y path g·ªëc d·ª± √°n
    const rootProjectPath = process.cwd();

    // Path tuy·ªát ƒë·ªëi t·ªõi th∆∞ m·ª•c uploads
    const uploadsPath = path.join(rootProjectPath, 'src', UPLOAD_DIR);

    // Path tuy·ªát ƒë·ªëi t·ªõi file
    const filePath = path.join(uploadsPath, filename)

    // 3. Check t·ªìn t·∫°i
    if (!isFileExists(filePath)) {
    return res.json({
        success: false,
        message: `‚ùå File kh√¥ng t·ªìn t·∫°i: ${path.basename(filePath)}`
      });
    }

    // 4. X√≥a file
    deleteFileSafely(filePath);
    // 5. Tr·∫£ v·ªÅ response th√†nh c√¥ng
    return res.json({
      success: true,
      message: `‚úÖ ƒê√£ x√≥a file: ${path.basename(filePath)}`
    });

  }catch(error){
    // Ghi log l·ªói, tr·∫£ l·ªói 500
    logger.error(`L·ªói khi x√≥a file ${filePath}: ${error.stack}`);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ x√≥a file.' });
  }
}