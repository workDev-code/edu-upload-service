import fs from "fs/promises";
import path from "path";
import "dotenv/config";
import { isFileExists, deleteFileSafely } from "../utils/fileUtils.js";
import createLogger from "../config/loggerConfig.js";

const UPLOAD_DIR = process.env.UPLOAD_DIR;

// L·∫•y logger k√®m t√™n file controller
const logger = createLogger(import.meta.url || __filename);

export const handleUpload = async (req, res) => {
  try {
    if (!req.file) {
      logger.warn("Upload th·∫•t b·∫°i: kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n");
      return res.status(400).json({ error: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n." });
    }

    logger.info(
      `Upload th√†nh c√¥ng file: ${req.file.originalname} -> ${req.file.filename}`
    );

    res.status(200).json({
      message: "T·∫£i l√™n th√†nh c√¥ng!",
      file: {
        filename: req.file.filename,
        originalname: req.file.originalname,
        size: req.file.size,
        mimetype: req.file.mimetype,
        url: `/uploads/${req.file.filename}`,
      },
    });
  } catch (error) {
    logger.error(`L·ªói trong qu√° tr√¨nh upload: ${error.stack}`);
    res.status(500).json({
      error: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh upload. Vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
};

export const handleUploadMultileFiles = (fileType) => async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      logger.warn("Upload nhi·ªÅu file th·∫•t b·∫°i: kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n");
      return res.status(400).json({ error: "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i l√™n." });
    }

    const uploadedFiles = req.files.map((file) => ({
      originalName: file.originalname,
      filename: file.filename,
      mimetype: file.mimetype,
      size: file.size,
      url: `/uploads/${fileType}s/${file.filename}`,
    }));

    logger.info(
      `Upload nhi·ªÅu file th√†nh c√¥ng: ${uploadedFiles
        .map((f) => f.filename)
        .join(", ")}`
    );

    res.json({
      message: "Upload nhi·ªÅu file th√†nh c√¥ng!",
      files: uploadedFiles,
    });
  } catch (error) {
    logger.error(`L·ªói trong qu√° tr√¨nh upload nhi·ªÅu file: ${error.stack}`);
    res.status(500).json({
      error: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh upload. Vui l√≤ng th·ª≠ l·∫°i sau.",
    });
  }
};

export const listUploadedFiles = async (req, res) => {
  try {
    // logger.info(`üìÇ Current working directory: ${process.cwd()}`);
    const uploadDir = path.join(process.cwd(), "uploads");
    logger.info(`üìÇ Current working directory: ${uploadDir}`);

    // üìÇ Danh s√°ch th∆∞ m·ª•c c·∫ßn ƒë·ªçc
    const uploadDirs = ["images", "videos", "documents", "audios"].map((f) =>
      path.join(uploadDir, f)
    );

    logger.info(
      `üìÇ uploadDirs directories: ${JSON.stringify(uploadDirs, null, 2)}`
    );

    // ‚Üí t·∫°o m·ªôt m·∫£ng c√°c Promise.
    const promises = uploadDirs.map(async (dir) => {
      try {
        await fs.access(dir);
        const files = await fs.readdir(dir);
        logger.info(`üìÇ ${dir} -> ${files.length} file`);
        return { folder: dir, files };
      } catch {
        logger.warn(`‚ö† Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: ${dir}`);
        return { folder: dir, files: [] };
      }
    });

    const results = await Promise.all(promises); // ƒë·ª£i t·∫•t c·∫£ Promise ho√†n th√†nh

    return res.status(200).json({
      message: "ok",
      data: valid, // ƒë√¢y l√† danh s√°ch file trong t·ª´ng th∆∞ m·ª•c
    });
  } catch (error) {
    logger.error(`L·ªói khi ƒë·ªçc danh s√°ch file upload: ${error.stack}`);
    return res
      .status(500)
      .json({ error: "Kh√¥ng th·ªÉ ƒë·ªçc danh s√°ch file upload." });
  }
};

export const deleteUpload = async (req, res) => {
  try {
    const { filename } = req.query;

    if (!filename || filename.includes("..") || filename.includes("/")) {
      logger.warn(`T√™n file kh√¥ng h·ª£p l·ªá: ${filename}`);
      return res.status(400).json({
        success: false,
        error: "Invalid filename.",
      });
    }

    const uploadsPath = path.join(process.cwd(), "src", UPLOAD_DIR);
    const filePath = path.join(uploadsPath, filename);

    if (!isFileExists(filePath)) {
      logger.warn(`File kh√¥ng t·ªìn t·∫°i: ${filename}`);
      return res.json({
        success: false,
        message: `‚ùå File kh√¥ng t·ªìn t·∫°i: ${filename}`,
      });
    }

    deleteFileSafely(filePath);
    logger.info(`ƒê√£ x√≥a file: ${filename}`);

    return res.json({
      success: true,
      message: `‚úÖ ƒê√£ x√≥a file: ${filename}`,
    });
  } catch (error) {
    logger.error(`L·ªói khi x√≥a file ${req.query.filename}: ${error.stack}`);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ x√≥a file." });
  }
};
